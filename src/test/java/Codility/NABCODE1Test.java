package Codility;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class NABCODE1Test {
    NABCODE1 obj = new NABCODE1();

    @Test
    public void testSolution() {
        int[][] A = {{0, 0, 0, 0}, {0, 0, 1, 0}, {1, 0, 0, 1}};
        int K = 2;
        int expected = this.obj.solution(K, A);
        int actual = 2;

        assertEquals(expected, actual);
        expected = this.obj.solution2(K, A);
        assertEquals(expected, actual);
        expected = this.obj.solution3(K, A);
        assertEquals(expected, actual);
    }

    @Test
    public void testSolution_2() {
        int[][] A = {{0, 1}, {0, 0}};
        int K = 1;
        int expected = this.obj.solution(K, A);
        int actual = 2;

        assertEquals(expected, actual);
        expected = this.obj.solution2(K, A);
        assertEquals(expected, actual);
        expected = this.obj.solution3(K, A);
        assertEquals(expected, actual);
    }

    @Test
    public void testSolution_3() {
        List<Integer> specificValues = List.of(0, 1,2,3,4,5,6,7,8,9
        ,10,44,66,44,11,22,55,66,77,44);

        int[][] random2DArray = createRandom2DArray(1, 400, specificValues);
        printArray2Dimension(random2DArray);

        int[][] A = {{0, 0, 0, 1}, {0, 1, 0, 0}, {0, 0, 1, 0}, {1, 0, 0, 0}, {0, 0, 0, 0}};
        int K = 4;
        long startTime = System.nanoTime();
        int expected = this.obj.solution(K, A);
        long endTime = System.nanoTime();
        long duration = endTime - startTime;
//        System.out.println("duration: " + duration);
        System.out.println("duration milisecond: " + duration/1000);
        int actual = 8;

        assertEquals(expected, actual);
        expected = this.obj.solution2(K, A);
        assertEquals(expected, actual);
        expected = this.obj.solution3(K, A);
        assertEquals(expected, actual);
    }

    @Test
    @DisplayName("10_000 elements array - test large input")
    public void testSolution_4() {
        List<Integer> specificValues = List.of(0, 1);

//        int[][] random2DArray = createRandom2DArray(100, 100, specificValues);
        int[][] tenThousandsElementsArray;
        tenThousandsElementsArray = new int[][]{{1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0},{0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,1},{0,1,0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0},{0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1},{1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,1,0},{1,0,0,0,1,1,0,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1},{1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,0},{1,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0},{0,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,0},{0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1},{1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,0,0},{1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0},{0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,0},{1,1,1,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,1},{1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,1,0,0,1},{0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0},{0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0},{0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,1,1,0,1,1},{1,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,0,1},{0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,1,1,0},{1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,1,1,1,1},{0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,0},{1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,0},{1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0},{0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,0,1,0,0},{0,0,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1},{1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,0},{1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0},{1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1},{1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,0,1},{1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,0},{1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0},{0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1},{1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1},{0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1},{0,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1},{0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,1},{1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0},{1,1,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0},{1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,0,0},{0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0},{0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1},{0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,0},{1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,0,0,0,1},{1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1},{0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1},{0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,1},{1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,1},{1,0,1,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,1,0,1,0,0},{1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1},{1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0},{1,0,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,1,0},{0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1},{1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,1},{1,0,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1},{1,1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,1},{1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0},{0,0,1,0,0,1,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1},{1,1,0,0,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0},{1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0},{0,0,1,0,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1,1},{0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,1,1},{1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,0,1,1,1,1},{1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,1},{0,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0,0,1,0,1,1},{1,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,1},{0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0},{0,0,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,1},{1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0},{0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1},{1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0},{1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0},{1,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1},{1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,1,0},{1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0},{1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1},{0,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0},{1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1},{1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1},{0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,0},{1,1,0,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,0,0},{0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0},{1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,1,1,0},{1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0},{0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0},{1,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0},{0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0},{1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1},{0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,0,1,0,0},{1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0},{0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1},{1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1},{1,0,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1},{1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,1},{0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,0,1,1},{1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0},{0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,1,0},{0,1,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,1,1}};
        //printArray2Dimension(tenThousandsElementsArray);
        int[][] A = {{0,0,0,1},{0,1,0,0},{0,0,1,0},{1,0,0,0},{0,0,0,0}};
        int K = 400;
        System.out.println("rows: " + tenThousandsElementsArray.length);
        System.out.println("cols: " + tenThousandsElementsArray[0].length);

        long startTime = System.nanoTime();
        int expected = this.obj.solution(K, tenThousandsElementsArray);
        long endTime = System.nanoTime();

        long duration = endTime - startTime;
        System.out.println("duration: " + duration);
        System.out.println("milisecond: " + duration/1_000_000);
    }
    @Test
    @DisplayName("100_000 elements array - test large input")
    public void testSolution_5() {
//        List<Integer> specificValues = List.of(0, 1);
        int[][] fourHundredElement;
        fourHundredElement = new int[][]{{1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0}};
        //printArray2Dimension(fourHundredElement);
        int[][] oneHundredThousandsElementsArray = this.createNewArrayByAppendMultipleTime(fourHundredElement,400);
        int[][] A = {{0,0,0,1},{0,1,0,0},{0,0,1,0},{1,0,0,0},{0,0,0,0}};
        int K = 400;
        System.out.println("rows: " + oneHundredThousandsElementsArray.length); //400
        System.out.println("cols: " + oneHundredThousandsElementsArray[0].length); //400

        long startTime = System.nanoTime();
        int expected = this.obj.solution(K, oneHundredThousandsElementsArray);
        long endTime = System.nanoTime();
        /**
         * getHouses bigO: 160,000
         * housesList.size(): 85,600
         * solution bigO: 799,089,409
         */

        long duration = endTime - startTime;
        System.out.println("duration: " + duration);
        System.out.println("milisecond: " + duration/1_000_000); // 6,619 ~ 6,6 second
    }

    @Test
    @DisplayName("100_000 elements array - test large input")
    public void testSolution2_1() {
//        List<Integer> specificValues = List.of(0, 1);
        int[][] fourHundredElement;
        fourHundredElement = new int[][]{{1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0}};
        //printArray2Dimension(fourHundredElement);
        int[][] oneHundredThousandsElementsArray = this.createNewArrayByAppendMultipleTime(fourHundredElement,400);
        int[][] A = {{0,0,0,1},{0,1,0,0},{0,0,1,0},{1,0,0,0},{0,0,0,0}};
        int K = 800;
        System.out.println("rows: " + oneHundredThousandsElementsArray.length); //400
        System.out.println("cols: " + oneHundredThousandsElementsArray[0].length); //400

        long startTime = System.nanoTime();
        int expected = this.obj.solution2(K, oneHundredThousandsElementsArray);
        long endTime = System.nanoTime();
        int actual = 74400;

        long duration = endTime - startTime;
        System.out.println("duration: " + duration);
        System.out.println("milisecond: " + duration/1_000_000);
        assertEquals(expected,actual);
    }

    @Test
    @DisplayName("100_000 elements array - test large input")
    public void testSolution3_1() {
//        List<Integer> specificValues = List.of(0, 1);
        int[][] fourHundredElement;
        fourHundredElement = new int[][]{{1,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0}};
        //printArray2Dimension(fourHundredElement);
        int[][] oneHundredThousandsElementsArray = this.createNewArrayByAppendMultipleTime(fourHundredElement,400);
        int[][] A = {{0,0,0,1},{0,1,0,0},{0,0,1,0},{1,0,0,0},{0,0,0,0}};
        int K = 800;
        System.out.println("rows: " + oneHundredThousandsElementsArray.length); //400
        System.out.println("cols: " + oneHundredThousandsElementsArray[0].length); //400

        long startTime = System.nanoTime();
        int expected = this.obj.solution3(K, oneHundredThousandsElementsArray);
        long endTime = System.nanoTime();
        int actual = 74400;

        long duration = endTime - startTime;
        System.out.println("duration: " + duration);
        System.out.println("milisecond: " + duration/1_000_000);
        assertEquals(expected,actual);
    }

    private void printArray2Dimension(int[][] random2DArray) {
        //{{0,0,0,1},{0,1,0,0},{0,0,1,0},{1,0,0,0},{0,0,0,0}}
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("{");
        for (int[] ints : random2DArray) {
            stringBuffer.append("{");
            for (int j = 0; j < random2DArray[0].length; j++) {
                stringBuffer.append(ints[j] + ",");
            }
            stringBuffer.setLength(stringBuffer.length() - 1);
            stringBuffer.append("}");
            stringBuffer.append(",");
        }
        stringBuffer.setLength(stringBuffer.length() - 1);
        stringBuffer.append("}");
        System.out.println(stringBuffer.toString());
    }

    private int[][] createRandom2DArray(int rows, int cols, List<Integer> specificValues) {
        int[][] array = new int[rows][cols];
        for (int i = 0; i < rows ; i++) {
            for (int j = 0; j < cols; j++) {
                Random rand = new Random();
                int randomElement = specificValues.get(rand.nextInt(specificValues.size()));
                array[i][j] = randomElement;
            }
        }
        return array;
    }

    private int[][] createNewArrayByAppendMultipleTime(int[][] array1, int numAppend) {
        int rows1 = array1.length;
//        int rows2 = array2.length;
        int cols = array1[0].length;

        int[][] appendedArray = new int[rows1*numAppend][cols];

        // Copy elements from array1 to the appended array
        for (int i = 0; i < numAppend ; i++) {
            for (int j = 0; j < rows1; j++) {
                System.arraycopy(array1[j], 0, appendedArray[j + rows1*i], 0, cols);
            }
        }

        // Copy elements from array2 to the appended array
//        for (int i = 0; i < rows2; i++) {
//            System.arraycopy(array2[i], 0, appendedArray[i + rows1], 0, cols);
//        }

        return appendedArray;
    }


}
